<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Boot on JobRunr</title>
    <link>https://www.jobrunr.io/en/tags/spring-boot/</link>
    <description>Recent content in Spring Boot on JobRunr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://www.jobrunr.io/en/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Secure your JobRunr Dashboard with Anonymous Authentication</title>
      <link>https://www.jobrunr.io/en/guides/authentication/anonymous-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.jobrunr.io/en/guides/authentication/anonymous-authentication/</guid>
      <description>JobRunr Pro allows to define a set of rules to restrict the access to the JobRunr Pro Dashboard and its underlying REST API. In this guide, you will learn how to utilize the AnonymousAuthenticationProvider to implement authorization rules without the need for user authentication.&#xA;Prerequisites JobRunr Pro 7.0.0 or later You already know how to configure JobRunr What is an AnonymousAuthenticationProvider The AnonymousAuthenticationProvider is a simple authentication provider that allows you to specify authorization rules that are checked whenever we visit the dashboard and for all access to the REST API endpoints.</description>
    </item>
    <item>
      <title>Secure your JobRunr Dashboard with Basic Authentication</title>
      <link>https://www.jobrunr.io/en/guides/authentication/basic-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.jobrunr.io/en/guides/authentication/basic-authentication/</guid>
      <description>Basic authentication is an HTTP standard used for access control. Basic authentication is already available to both JobRunr OSS and JobRunr Pro. JobRunr Pro provides enhanced security by configuring the BasicAuthenticationProvider, allowing you to set up authorization rules for each user. In this guide, we&amp;rsquo;ll show you how to leverage the BasicAuthenticationProvider to secure your dashboard with customized access control.&#xA;Do not use BasicAuthenticationProvider on a dashboard that is publicly available on the internet as this authentication can be brute forced.</description>
    </item>
    <item>
      <title>Create and schedule jobs with JobRunr using only a Java lambda</title>
      <link>https://www.jobrunr.io/en/guides/intro/java-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.jobrunr.io/en/guides/intro/java-lambda/</guid>
      <description>In this guide, we will learn how to:&#xA;setup JobRunr learn how to enqueue and schedule a job in vanilla Java or your favorite web framework using only a Java 8 lambda monitor your jobs using the built-in dashboard What is JobRunr Introduction JobRunr is a library that we can embed in our application and which allows us to schedule background jobs using a Java 8 lambda. We can use any existing method of our Spring services to create a job without the need to implement an interface.</description>
    </item>
    <item>
      <title>Create and schedule jobs with JobRunr using a JobRequest and JobRequestHandler</title>
      <link>https://www.jobrunr.io/en/guides/intro/java-job-request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://www.jobrunr.io/en/guides/intro/java-job-request/</guid>
      <description>In this guide, we will learn how to:&#xA;setup JobRunr learn how to enqueue and schedule a job in vanilla Java or your favorite web framework using the JobRequest / JobRequestHandler pattern. monitor your jobs using the built-in dashboard What is JobRunr Introduction JobRunr is a library that we can embed in our application and which allows us to schedule background jobs using a Java 8 lambda. We can use any existing method of our Spring services to create a job without the need to implement an interface.</description>
    </item>
  </channel>
</rss>
