<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JobRunr Pro on JobRunr</title>
    <link>https://www.jobrunr.io/en/documentation/pro/</link>
    <description>Recent content in JobRunr Pro on JobRunr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 30 Apr 2020 11:12:23 +0200</lastBuildDate><atom:link href="https://www.jobrunr.io/en/documentation/pro/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Custom delete policy</title>
      <link>https://www.jobrunr.io/en/documentation/pro/custom-delete-policy/</link>
      <pubDate>Thu, 24 Jun 2021 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/custom-delete-policy/</guid>
      <description>Do you have a recurring job that triggers every 5 minutes and only does a small check to see whether something needs to be processed? 95% of the time there is probably nothing to do and the job succeeds immediately. But, all these recurring jobs fill up your JobRunr Dashboard (a huge amount of succeeded and deleted jobs) and also fill up your database.
JobRunr already allows you to configure the deletion policy for all jobs in the JobRunr configuration.</description>
    </item>
    
    <item>
      <title>Database Fault Tolerance</title>
      <link>https://www.jobrunr.io/en/documentation/pro/database-fault-tolerance/</link>
      <pubDate>Thu, 24 Jun 2021 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/database-fault-tolerance/</guid>
      <description>JobRunr by defaults stops completely if my SQL / NoSQL database goes down and there is a reason for this - JobRunr namely uses your database for a lot of things:
 Master node election for the BackgroundJobServer Fetching the details of a Job and update the state when it&amp;rsquo;s done Monitoring whether there are no zombie jobs (jobs that were being processed on a BackgroundJobServer node that crashed) Optimistic locking so that a job will be only executed once &amp;hellip;  The moment JobRunr loses itâ€™s connection to the database (or the database goes down), there will be a lot of threads that will try to read and write updates to the database but all of these will off-course fail.</description>
    </item>
    
    <item>
      <title>Database Migrations</title>
      <link>https://www.jobrunr.io/en/documentation/pro/database-migrations/</link>
      <pubDate>Thu, 24 Jun 2021 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/database-migrations/</guid>
      <description>JobRunr will by default perform all database related migrations automatically for you.
If you are not allowed to have a user using DDL rights at runtime or if due to company policies, you cannot have JobRunr do the migrations for you, there are several options which we will discuss below. If you manually take control of your migrations, please note that we may introduce changes with a new to the database schema.</description>
    </item>
    
    <item>
      <title>Job Result</title>
      <link>https://www.jobrunr.io/en/documentation/pro/results/</link>
      <pubDate>Wed, 16 Sep 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/results/</guid>
      <description>If your job returns a result, JobRunr serializes it and stores it via the StorageProvider in the database of your choice.
You can then fetch the result of that job using the id of the job.
  void startWeatherPrediction(UUID cityId) {  Observation observation = observationService.getLatestObservation(cityId); // the original observation  BackgroundJob.enqueue(myId, () -&amp;gt; weatherService.predictWeather(cityId, observation)); }  WeatherPrediction getWeatherPrediction(UUID cityId) {  JobResultWithBackOffInfo jobResult = BackgroundJob.getJobResult(jobId);  if(jobResult.</description>
    </item>
    
    <item>
      <title>Replacing jobs</title>
      <link>https://www.jobrunr.io/en/documentation/pro/replace-jobs/</link>
      <pubDate>Wed, 16 Sep 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/replace-jobs/</guid>
      <description>Do you need to replace an already enqueued job? Or a job that is already being processed? Thanks to the JobRunr Pro enqueueOrReplace and scheduleOrReplace you can update the existing job easily.
 UUID cityId = city.getId(); Observation observation = observationService.getLatestObservation(cityId); // the original observation BackgroundJob.enqueue(myId, () -&amp;gt; weatherService.predictWeather(cityId, observation));  Observation observation = observationService.getLatestObservation(cityId); // the updated observation after a storm BackgroundJob.enqueueOrReplace(myId, () -&amp;gt; weatherService.predictWeather(cityId, observation)); This replaces the existing background job as it uses the same uuid to create the job.</description>
    </item>
    
    <item>
      <title>Advanced CRON expressions</title>
      <link>https://www.jobrunr.io/en/documentation/pro/advanced-cron-expressions/</link>
      <pubDate>Thu, 27 Aug 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/advanced-cron-expressions/</guid>
      <description>JobRunr Pro has support for more difficult CRON expressions.
See some examples below:
 BackgroundJob.scheduleRecurrently(Cron.firstDayOfTheMonth(10, 30), () -&amp;gt; System.out.println(&amp;#34;First day of the month!&amp;#34;)); This will run at 10:30 am on the first day of the month.   BackgroundJob.scheduleRecurrently(Cron.firstBusinessDayOfTheMonth(10, 30), () -&amp;gt; System.out.println(&amp;#34;First business day of the month!&amp;#34;)); This will run at 10:30 am on the first business day of the month, even if the first day of the month is a Saturday or a Sunday   BackgroundJob.</description>
    </item>
    
    <item>
      <title>Batches</title>
      <link>https://www.jobrunr.io/en/documentation/pro/batches/</link>
      <pubDate>Thu, 27 Aug 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/batches/</guid>
      <description>Batches allow you to create a bunch of background jobs atomically. This means that if there was an exception during the creation of background jobs, none of them will be processed. Consider you want to send 1000 emails to your clients, and they really want to receive these emails. Here is the old way:
public class NewsletterService {   @Inject  private UserRepository userRepository;   public void sendEmailsToAllSubscribers() {  List&amp;lt;User&amp;gt; users = userRepository.</description>
    </item>
    
    <item>
      <title>CI / CD &amp; Job Migrations</title>
      <link>https://www.jobrunr.io/en/documentation/pro/migrations/</link>
      <pubDate>Thu, 27 Aug 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/migrations/</guid>
      <description>Prevent JobNotFoundExceptions thanks to the JobRegressionGuard Are you applying some of Uncle Bob&amp;rsquo;s tips and tricks from his great book Clean Code? It probably also means you&amp;rsquo;re sometimes refactoring&amp;hellip; but what about your existing jobs in production? Won&amp;rsquo;t they break? Will you know if they break?
JobRunr Pro has you covered thanks to the JobRegressionGuard:
 @Test void validateExistingJobs() {  JobRegressionGuard jobRegressionGuard = new JobRegressionGuard();  jobRegressionGuard.validateJobs(&amp;#34;&amp;lt;url to your staging/production dashboard&amp;gt;&amp;#34;); } This simple unit test will notify you if you did some refactorings that are not compatible with the jobs in production.</description>
    </item>
    
    <item>
      <title>Dynamic Queues</title>
      <link>https://www.jobrunr.io/en/documentation/pro/dynamic-queues/</link>
      <pubDate>Thu, 27 Aug 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/dynamic-queues/</guid>
      <description>Are you running a multi-tenant application? Or do you have diverse types of jobs where certain types of jobs could potentially trigger peak workloads? Use JobRunr&amp;rsquo;s built-in dynamic queues to make sure that there is some fair-use and all jobs get a fair amount of resources!
 Note: JobRunr Pro supports unlimited dynamic queues and they can be used together with the priority queues.
 Example Use Cases  In a multi-tenant application where each tenant can initiate their own jobs, JobRunr ensures fair-use processing.</description>
    </item>
    
    <item>
      <title>Issue Tracking Integration</title>
      <link>https://www.jobrunr.io/en/documentation/pro/issuetracking-integration/</link>
      <pubDate>Thu, 27 Aug 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/issuetracking-integration/</guid>
      <description>Some jobs may fail due to downtime of an external system, some unforeseen circumstances or perhaps due to a bug.
JobRunr Pro integrates with GitHub issues and Jira so you can easily create an issue in case of a job failure. It will prefill all fields so you can save time and do what you do best: create excelling software without bugs ðŸ˜Š.
 Create an issue for failed jobs with 1 click in your issue tracking software.</description>
    </item>
    
    <item>
      <title>Job Filters</title>
      <link>https://www.jobrunr.io/en/documentation/pro/job-filters/</link>
      <pubDate>Thu, 27 Aug 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/job-filters/</guid>
      <description>A Job Filter can be used to extend the functionality of JobRunr with extra business processes when a job succeeds or fails. They also exist in the free version but in the Pro version integration is a lot easier as any Spring / Micronaut / Quarkus Bean can become a Job Filter.
Usage To create a Job Filter, just implement a bean with the interface JobClientFilter or JobServerFilter. Other filters are also available like the ApplyStateFilter and the ElectStateFilter.</description>
    </item>
    
    <item>
      <title>Job time-outs</title>
      <link>https://www.jobrunr.io/en/documentation/pro/job-timeout/</link>
      <pubDate>Thu, 27 Aug 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/job-timeout/</guid>
      <description>Do you have jobs that take forever due to some 3th party libraries that are unreliable? Or are your job executions sometimes stuck due to networking issues? With JobRunr Pro, you can have your jobs fail automatically if they take too long.
Usage via @Job annotation Using a job timeout is really easy, again thanks to the Job annotation. Just add the annotation to your service method and specify the job process timeout in ISO8601 Duration format:</description>
    </item>
    
    <item>
      <title>JobRunr Pro Dashboard</title>
      <link>https://www.jobrunr.io/en/documentation/pro/jobrunr-pro-dashboard/</link>
      <pubDate>Thu, 27 Aug 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/jobrunr-pro-dashboard/</guid>
      <description>The JobRunr Pro dashboard offers a lot of improvements that save your engineering teams a lot of time:
 Find any Job using the search functionality Save time thanks to usability improvements JobRunr Pro Enterprise  Restrict access using OpenID Authentication JobRunr Pro Enterprise  Embed the dashboard within Spring Server JobRunr Pro Enterprise  GDPR compliant Dashboard  Find any Job using the search functionality Are you processing millions of jobs?</description>
    </item>
    
    <item>
      <title>Mutexes</title>
      <link>https://www.jobrunr.io/en/documentation/pro/mutexes/</link>
      <pubDate>Thu, 27 Aug 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/mutexes/</guid>
      <description>A mutex is a mutually exclusive flag. It acts as a gate keeper to a resource allowing only one Job to use it and postpones all others jobs using the same mutex is free.
Usage via @Job annotation Using a mutex is as easy as using Queues and Server Tags, again thanks to the Job annotation. Just add it to your service method and specify the mutex to use</description>
    </item>
    
    <item>
      <title>Observability</title>
      <link>https://www.jobrunr.io/en/documentation/pro/observability/</link>
      <pubDate>Thu, 27 Aug 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/observability/</guid>
      <description>Although the JobRunr Pro Dashboard gives instant insights how your jobs are doing, you may already have an observability platform like Jaeger, HoneyComb or New Relic running. JobRunr Pro out-of-the box integrates with many of these observability platforms so you can keep on top of things.
MicroMeter Job Timings JobRunr allows to export amount of jobs processed, average job duration, maximum job duration and other metrics like job failure count per job.</description>
    </item>
    
    <item>
      <title>Priority Queues</title>
      <link>https://www.jobrunr.io/en/documentation/pro/priority-queues/</link>
      <pubDate>Thu, 27 Aug 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/priority-queues/</guid>
      <description>Are you processing millions of jobs? Do you have some high priority jobs that need to finish fast? Use JobRunr priority queues to make sure that critical jobs cut in front of already enqueued jobs.
 Note: JobRunr Pro supports up to 5 different priority queues and they can be used together with the load-balancing feature.
 Usage Using the Job Annotation Using queues could not have been easier thanks to the Job annotation.</description>
    </item>
    
    <item>
      <title>Real-time scheduling and enqueueing</title>
      <link>https://www.jobrunr.io/en/documentation/pro/real-time-scheduling/</link>
      <pubDate>Thu, 27 Aug 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/real-time-scheduling/</guid>
      <description>Do your jobs need to run some jobs on an exact moment? JobRunr Pro will do realtime enqueueing out-of-the-box!
Some history For performance reasons, JobRunr fetches all the jobs that need to be executed during the whole next pollIntervalInSeconds. This allows JobRunr to query, update and save jobs in bulk and that&amp;rsquo;s the reason why scheduled and recurring jobs are sometimes performed a couple of seconds too early.
JobRunr Pro to the rescue!</description>
    </item>
    
    <item>
      <title>Server Tags</title>
      <link>https://www.jobrunr.io/en/documentation/pro/server-tags/</link>
      <pubDate>Thu, 27 Aug 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/server-tags/</guid>
      <description>Do you have some jobs that can only be run on certain servers (e.g. jobs tied to a specific OS like Linux, Max and Windows)? Or do you want to run a job only on the server that created the job? JobRunr has you covered with Server Tags!
A BackgroundJobServer can have multiple server tags and a job can specify only one server tag via the Job annotation. If the server tag of the job matches any of the server tags of the server, the server is eligible to run the job.</description>
    </item>
    
    <item>
      <title>Transaction plugin</title>
      <link>https://www.jobrunr.io/en/documentation/pro/transactions/</link>
      <pubDate>Thu, 27 Aug 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/transactions/</guid>
      <description>The JobRunr Spring Boot Starter and Micronaut integration come with an @Transactional plugin that makes sure your jobs join the transaction created by the framework.
 @Inject private UserRepository userRepositoy; @Inject private JobScheduler jobScheduler;  @Transactional public void createUserAndSendWelcomeEmail(User user) {  userRepositoy.save(user);  jobScheduler.&amp;lt;UserService&amp;gt;enqueue(x -&amp;gt; x.sendWelcomeEmail(user.id)); }  Thanks to the @Transactional support, the whole method - including the job scheduling - is transactional.
  How does it work?</description>
    </item>
    
    <item>
      <title>Workflows using Job Chains</title>
      <link>https://www.jobrunr.io/en/documentation/pro/job-chaining/</link>
      <pubDate>Thu, 27 Aug 2020 11:12:23 +0200</pubDate>
      
      <guid>https://www.jobrunr.io/en/documentation/pro/job-chaining/</guid>
      <description>JobRunr Pro allows you to chain jobs using a fluent API style. This gives you an immediate overview of your business process.
Job chaining via continueWith  @Inject private ArchiveService archiveService; @Inject private NotifyService notifyService;  public void createArchiveAndNotify(String folder) {  BackgroundJob  .enqueue(() -&amp;gt; archiveService.createArchive(folder))  .continueWith(() -&amp;gt; notifyService.notifyViaSlack(&amp;#34;ops-team&amp;#34;, &amp;#34;The following folder was archived: &amp;#34; + folder)) }  The notification will only be send once the archive was created successfully (and thus the archiveService.</description>
    </item>
    
  </channel>
</rss>
