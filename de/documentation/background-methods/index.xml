<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hintergrundmethoden on JobRunr</title>
    <link>https://jobrunr.github.io/de/documentation/background-methods/</link>
    <description>Recent content in Hintergrundmethoden on JobRunr</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 30 Apr 2020 11:12:23 +0200</lastBuildDate><atom:link href="https://jobrunr.github.io/de/documentation/background-methods/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jobs in die Warteschlange stellen</title>
      <link>https://jobrunr.github.io/de/documentation/background-methods/enqueueing-jobs/</link>
      <pubDate>Wed, 16 Sep 2020 11:12:23 +0200</pubDate>
      
      <guid>https://jobrunr.github.io/de/documentation/background-methods/enqueueing-jobs/</guid>
      <description>Wie Sie bereits aus dem 5-minütigen Intro wissen, müssen Sie nur ein Lambda mit der entsprechenden Methode und ihren Argumenten übergeben, um einen Hintergrundjob in die Warteschlange zu stellen:
 JobId jobId = BackgroundJob.enqueue(() -&amp;gt; myService.doWork());  Hiermit wird ein Hintergrundjob mithilfe einer Instanz von MyService in die Warteschlange gestellt, die während der Warteschlange verfügbar ist.    JobId jobId = BackgroundJob.&amp;lt;MyService&amp;gt;enqueue(x -&amp;gt; x.doWork());  Hiermit wird ein Hintergrundjob ohne Verweis auf eine Instanz von MyService in die Warteschlange gestellt.</description>
    </item>
    
    <item>
      <title>Jobs planen</title>
      <link>https://jobrunr.github.io/de/documentation/background-methods/scheduling-jobs/</link>
      <pubDate>Wed, 16 Sep 2020 11:12:23 +0200</pubDate>
      
      <guid>https://jobrunr.github.io/de/documentation/background-methods/scheduling-jobs/</guid>
      <description>Manchmal möchten Sie möglicherweise einen Methodenaufruf verschieben. Zum Beispiel, um einen Tag nach ihrer Registrierung eine E-Mail an neu registrierte Benutzer zu senden. Rufen Sie dazu einfach die Methode &amp;ldquo;BackgroundJob.schedule&amp;rdquo; auf und übergeben Sie die gewünschte Verzögerung:
 BackgroundJob.schedule&amp;lt;EmailService&amp;gt;(Instant.now().plusHours(24),  x -&amp;gt; x.sendNewlyRegisteredEmail());  Der BackgroundJobServer von JobRunr überprüft regelmäßig alle geplanten Jobs und stellt sie in die Warteschlange, wenn sie ausgeführt werden müssen, damit die Mitarbeiter sie ausführen können. Standardmäßig beträgt das Prüfintervall 15 Sekunden.</description>
    </item>
    
    <item>
      <title>Wiederkehrende Jobs</title>
      <link>https://jobrunr.github.io/de/documentation/background-methods/recurring-jobs/</link>
      <pubDate>Wed, 16 Sep 2020 11:12:23 +0200</pubDate>
      
      <guid>https://jobrunr.github.io/de/documentation/background-methods/recurring-jobs/</guid>
      <description>Das Registrieren eines wiederkehrenden Jobs ist genauso einfach wie das Registrieren eines Hintergrundjobs - Sie müssen nur eine einzige Codezeile schreiben:
 BackgroundJob.scheduleRecurrently(Cron.daily(), () -&amp;gt; System.out.println(&amp;#34;Einfach!&amp;#34;));  Diese Zeile erstellt einen neuen wiederkehrenden Jobeintrag im StorageProvider. Eine spezielle Komponente in BackgroundJobServer überprüft die wiederkehrenden Jobs in einem minutenbasierten Intervall und stellt sie dann als Fire-and-Forget-Jobs in die Warteschlange. Auf diese Weise können Sie sie wie gewohnt verfolgen.
 Anmerkung: Damit wiederkehrende Methoden funktionieren, sollte immer mindestens ein BackgroundJobServer ausgeführt werden</description>
    </item>
    
    <item>
      <title>Argumente übergeben</title>
      <link>https://jobrunr.github.io/de/documentation/background-methods/passing-arguments/</link>
      <pubDate>Thu, 30 Apr 2020 11:12:23 +0200</pubDate>
      
      <guid>https://jobrunr.github.io/de/documentation/background-methods/passing-arguments/</guid>
      <description>JobRunr unterstützt die Übergabe von Argumenten an Hintergrundjobs - genau wie jeder andere normale Methodenaufruf. Diese Argumente können vom Typ &amp;ldquo;java.lang&amp;rdquo; oder sogar benutzerdefinierte Objekte sein.
 Berücksichtigen Sie Folgendes, wenn Sie benutzerdefinierte Objekte verwenden:  Es muss möglich sein, sie über Jackson oder Gson zu serialisieren und zu deserialisieren Sehen Sie sich einen Standardkonstruktor ohne Argumente an (er kann privat sein) - dies hilft Jackson und Gson, ihn zu deserialisieren    Mail mail = new Mail(&amp;#34;from&amp;#34;, &amp;#34;to&amp;#34;, &amp;#34;subject&amp;#34;, &amp;#34;message&amp;#34;); BackgroundJob.</description>
    </item>
    
    <item>
      <title>Empfohlene Vorgehensweise</title>
      <link>https://jobrunr.github.io/de/documentation/background-methods/best-practices/</link>
      <pubDate>Thu, 30 Apr 2020 11:12:23 +0200</pubDate>
      
      <guid>https://jobrunr.github.io/de/documentation/background-methods/best-practices/</guid>
      <description>Machen Sie Jobargumente klein und einfach Methodenaufrufe (d. H. Ein Job) werden während des Erstellungsprozesses des Hintergrundjobs serialisiert. Argumente werden mithilfe der JobMapper-Klasse in Json-Zeichenfolgen konvertiert. Wenn Sie komplexe Entitäten und / oder große Objekte haben; Bei Arrays ist es besser, sie in einer Datenbank abzulegen und dann nur ihre Identität an den Hintergrundjob zu übergeben.
Also, anstatt dies zu tun:
public void backgroundMethod(Entity entity) {} Überlegen Sie Folgendes:
public void backgroundMethod(long entityId) {}</description>
    </item>
    
    <item>
      <title>Hintergrundjob Abhängigkeiten</title>
      <link>https://jobrunr.github.io/de/documentation/background-methods/background-jobs-dependencies/</link>
      <pubDate>Thu, 30 Apr 2020 11:12:23 +0200</pubDate>
      
      <guid>https://jobrunr.github.io/de/documentation/background-methods/background-jobs-dependencies/</guid>
      <description>In fast jedem Job möchten Sie andere Klassen Ihrer Anwendung verwenden, um andere Arbeiten auszuführen und Ihren Code sauber und einfach zu halten. Ein Beispiel:
 @Component public class MailService {   private EmailRenderer emailRenderer;  private UserRepository userRepository;  private Environment environment;   public MailService(EmailRenderer emailRenderer, UserRepository userRepository, Environment environment) {  this.emailRenderer = emailRenderer;  this.userRepository = userRepository;  this.environment = environment;  }   public void sendMail(UUID userId, String templateId) {  User user = userRepository.</description>
    </item>
    
    <item>
      <title>Logging &amp; Auftragsfortschritt</title>
      <link>https://jobrunr.github.io/de/documentation/background-methods/logging-progress/</link>
      <pubDate>Thu, 30 Apr 2020 11:12:23 +0200</pubDate>
      
      <guid>https://jobrunr.github.io/de/documentation/background-methods/logging-progress/</guid>
      <description>Einige Jobs dauern sehr lange - sie generieren Tausende von E-Mails, führen einen Stapelimport einiger großer XML- oder CSV-Dateien durch, &amp;hellip;. Woher wissen Sie, ob Ihr Code tatsächlich ausgeführt wird und seinen eigentlichen Job erledigt (Wortspiel beabsichtigt)?
Begrüßen Sie die Jobprotokollierung und den Jobfortschrittsbalken.
  Beobachten Sie die Protokollierung live von Ihrem eigentlichen Job   Logging JobRunr unterstützt die Protokollierung im Dashboard. Neue Nachrichten werden angezeigt, sobald sie protokolliert werden.</description>
    </item>
    
    <item>
      <title>Umgang mit Ausnahmen</title>
      <link>https://jobrunr.github.io/de/documentation/background-methods/dealing-with-exceptions/</link>
      <pubDate>Thu, 30 Apr 2020 11:12:23 +0200</pubDate>
      
      <guid>https://jobrunr.github.io/de/documentation/background-methods/dealing-with-exceptions/</guid>
      <description>Es passieren schlimme Dinge. Jede Methode kann verschiedene Arten von Ausnahmen auslösen. Diese Ausnahmen können entweder durch Programmierfehler verursacht werden, bei denen Sie die Anwendung erneut bereitstellen müssen, oder durch vorübergehende Fehler, die ohne zusätzliche Bereitstellung behoben werden können.
JobRunr behandelt alle Ausnahmen, die sowohl in internen (zu JobRunr selbst gehörenden) als auch in externen Methoden (Jobs, Filter usw.) auftreten, sodass nicht die gesamte Anwendung heruntergefahren wird. Alle internen Ausnahmen werden protokolliert (vergessen Sie also nicht, die Protokollierung zu aktivieren).</description>
    </item>
    
  </channel>
</rss>
